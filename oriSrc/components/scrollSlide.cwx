<script role="json">
    export default {
        "component": true
    }
</script>
<template>
  <view class="vuc-scroll-slide" bindtap="deActive">
    <view class="vuc-scroll-slide-btns">
      <view></view>
      <view class="vuc-scroll-slide-btns-wrap"><slot name="btns"></slot></view>
    </view>
    <view class="vuc-scroll-slide-wrap {{isActive ? 'active' : ''}}" style="{{innerStyle}}" catchtap="toggleActive">
      <slot name="cont"></slot>
    </view>
  </view>
</template>
<script>
const Drag = require("../../../tools/drag.js");
Component({
  options: {
      multipleSlots: true
  },
  properties: {
      config: {
          type: Object,
          value: {},
      }
  },
  attached(){
      const {data} = this;
      data.confg || (data.confg = {});
  },
  ready(){
    const {data} = this;
    if (!data.$el || !data.$ele) {
      const query = wx.createSelectorQuery().in(this);
      data.$el || query.select('.vuc-scroll-slide').boundingClientRect(function ($el) {
        data.$el = $el;
      }).exec();
      data.$ele || query.select('.vuc-scroll-slide-btns-wrap').boundingClientRect(function ($ele) {
        data.$ele = $ele;
      }).exec();
    }
    this.cacheWrapSize();
  },
  data: {
    innerStyle: "",
    isActive: "",
    cachedWrapsize: null,
  },
  methods: {
    deActive(){
        const active =!this.data.isActive;
        this.setData({
            isActive: false,
            innerStyle: this.innerStyle(false)
        });
    },
    toggleActive(){
        const active =!this.data.isActive;
        this.setData({
            isActive: active,
            innerStyle: this.innerStyle(active)
        });
    },
    cacheWrapSize() {
      const { data } = this;
      const $el = data.$el;
      const $ele = data.$ele;
      if (!$ele || !$el) {
          return { wrap: { x: 0, y: 0 }, inner: { x: 0, y: 0 } }
      }
      const wrap = { x: $el.width, y: $el.height }
      let ix = $ele.width;
      let iy = $ele.height;
      const inner = { x: ix, y: iy };
      data.cachedWrapsize = { wrap, inner };
      return data.cachedWrapsize;
    },
    getWrapSize() { return this.data.cachedWrapsize || this.cacheWrapSize(); },
    innerStyle(isActive) {
      const size = this.getWrapSize().inner;
      return `
        transform: translate3d(${isActive ? -size.x : 0}px, 0px,0);
      `;
    },
  }
});
</script>
<style>
/*滚动开始*/
.vuc-scroll-slide{
  position: relative;
  overflow: hidden;
}
.vuc-scroll-slide-wrap{
  position: relative;
  will-change: transform;
  font-size: 0;
  background-color: #fff;
  padding-right: 2rem;
  transition: all .3s;
  box-shadow: .3rem 0 .4rem -.4rem #418dcb;
}
.vuc-scroll-slide-wrap>view{
  overflow: hidden;
}
.vuc-scroll-slide-wrap:after{
  position: absolute;
  top: 50%;
  right: .75rem;
  transform: translateY(-50%);
  width: 1rem;
  height: 1rem;
  box-sizing: border-box;
  content: "";
  z-index: 10;
  display: inline-block;
  border-left: 0 solid transparent;
  border-right: .5rem solid  #418dcb;
  border-top: .5rem solid transparent;
  border-bottom: .5rem solid transparent;
  transition: all .3s;
}
.vuc-scroll-slide-wrap.active{
  border-right: 1px solid #f8f8f8;
}
.vuc-scroll-slide-wrap:active{
  background-color: #eee;
}
.vuc-scroll-slide-wrap.active:after{
  border-left: .5rem solid #418dcb;
  border-right: 0 solid  transparent;
  border-top: .5rem solid transparent;
  border-bottom: .5rem solid transparent;
}
.vuc-scroll-slide-btns{
  position: absolute;
  width: 100%;
  height: 100%;
  overflow: hidden;
  display: flex;
}
.vuc-scroll-slide-btns>view:first-child{
  flex: 1 1 0;
}
.vuc-scroll-slide-btns>view:last-child{
  font-size: 0;
}
.vuc-scroll-slide-btns>view:last-child>view{
  font-size: .6rem;
  display: inline-block;
}
</style>
