<script role="json">
  export default {
    "component": true
  }
</script>
<template>
  <view class="vuc-popup" class="{{popClass}}"  bindtap="sHidePop">
    <view class="vuc-popup-null" wx-if="{{!full && derction === 'bottom'}}"></view>
    <view class="vuc-popup-content" class="vuc-popup-content {{full}}" bindtransitionend="transitionEnd"><slot name="cont"/></view>
    <view class="vuc-popup-null"  wx-if="{{!full && derction === 'top'}}"></view>
  </view>
</template>
<script>
  Component({
    options: {
      multipleSlots: true
    },
    properties: {
      config: {
        type: Object,
        value: {},
      }
    },
    attached(){},
    data: {
      active: false,
      sShow: false,
      show: false,
      full: "full",
      derction: 'bottom',
      popClass: 'vuc-popup bottom',
    },
    methods: {
      getClass(active, sShow){
        const arr = ["vuc-popup", this.data.derction];
        active && arr.push("active");
        sShow && arr.push("show");
        return arr.join(" ");
      },
      showPop() {
        const { data } = this;
        this.setData({
          sShow: true,
          popClass: this.getClass(data.active, true)
        });
        setTimeout(() => this.setData({
          active: true,
          popClass: this.getClass(true, true)
        }), 20)
      },
      sHidePop() {
        const { data } = this;
        data.config.stop || this.setData({
          active: false,
          popClass: this.getClass(false, data.sShow)
        });
      },
      hidePop() {
        const { data } = this;
        this.setData({
          active: false,
          popClass: this.getClass(false, data.sShow)
        });
      },
      transitionEnd() {
        const { data } = this;
        this.setData({
          sShow: data.active,
          show: data.active,
          popClass: this.getClass(data.active, data.active)
        });
      }
    }
  })

</script>
<style>
  .vuc-popup{
    display: none;
    box-orient:vertical;
    flex-direction:column;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    overflow: hidden;
    transition: all 1s;
    z-index: 1;
  }
  .vuc-popup.show{
    display: flex;
    background-color: rgba(0,0,0,.0);
  }
  .vuc-popup.active{
    background-color: rgba(0,0,0,.5);
  }
  .vuc-popup-null{
    flex: 1;
  }
  .vuc-popup-content{
    transform: translate3d(0,0,0);
    transition: transform .3s;
    will-change: transform;
  }
  .top .vuc-popup-content{
    transform: translate3d(0, -100%, 0);
  }
  .bottom .vuc-popup-content{
    transform: translate3d(0, 100%, 0);
  }
  .left .vuc-popup-content{
    transform: translate3d(-100%, 0, 0);
  }
  .right .vuc-popup-content{
    transform: translate3d(100%, 0, 0);
  }
  .vuc-popup-content.full{
    height: 100%;
  }
  .active .vuc-popup-content{
    transform: translateY(0);
  }
</style>
